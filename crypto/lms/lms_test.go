package lms
import (
	"testing"
	_ "github.com/HcashOrg/hcashd/chaincfg/chainec"
	_ "github.com/HcashOrg/hcashd/crypto"
	"time"
	"fmt"
	"github.com/LoCCS/lmots"
	"github.com/LoCCS/lms"
	"github.com/LoCCS/lmots/rand"
	"strings"
)

const (
	H = 8 // the height of the merkle tree
)
// GenerateKey is not implemented in hcashd. So the merkle agent is generated by function in lms project of LoCCS
// Sign and Verify are implemented in hcashd.
func TestLMS(t *testing.T) {
	//seed, err := rand.RandSeed()
	seed := make([]byte, lmots.N)
	rand.Reader.Read(seed)
	agentStart := time.Now()
	merkleAgent, err := lms.NewMerkleAgent(H, seed)
	agentTime := time.Since(agentStart)

	if err != nil {
		fmt.Println(err)
	}
	fmt.Printf("Time on new merkle Agent with height %v : %v\n", H, agentTime)

	var signSum time.Duration
	var verifySum time.Duration
	var maxsig time.Duration
	var maxver time.Duration
	success := 0
	failure := 0
	for i := 0; i < 1<<H; i++ {

		if i%1837 == 0 {
			fmt.Printf("Success %v, failure %v\n", success, failure)
			mBytes := merkleAgent.Serialize()
			sBytes := merkleAgent.SerializeSecretKey()
			merkleAgent = lms.RebuildMerkleAgent(mBytes, sBytes)
		}

		message := make([]byte, lmots.N)
		rand.Reader.Read(message)



		lmsPrivKey := &PrivateKey{
			MerkleAgent: *merkleAgent,
		}
		lmsSig, err := LMS.Sign(*lmsPrivKey, message)
		if lmsSig == nil{
			fmt.Println("nil")
		}

		if err != nil {
			fmt.Println(err)
			if !strings.Contains(err.Error(), "Warning") {
				continue
			}
		}
		//sigBytes := sigraw.Serialize()
		//sig := DeserializeMerkleSig(sigBytes)

		sigData := lmsSig.Serialize()

		sig := new(lms.MerkleSig)
		if err := sig.Deserialize(sigData); nil != err {
			t.Fatal(err)
		}




		lmsSig = &Signature{
			MerkleSig: *sig,
		}
		lmsPubKey := &PublicKey{
			root: merkleAgent.Root(),
		}
		result := LMS.Verify(lmsPubKey, message, lmsSig)

		if result {
			success++
		} else {
			failure++
			fmt.Println(i, "hello")
			return
		}

	}
	fmt.Println()
	fmt.Printf("Success %v, failure %v\n", success, failure)
	fmt.Printf("Merkle agent building time %v : %v\n", H, agentTime)
	fmt.Printf("Average signature time: %v\n", signSum/(1<<H))
	fmt.Printf("Max signature time: %v\n", maxsig)
	fmt.Printf("Average verification time: %v\n", verifySum/(1<<H))
	fmt.Printf("Max verify time: %v\n", maxver)

}
